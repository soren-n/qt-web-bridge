name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@v10.3.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        git_committer_name: "github-actions[bot]"
        git_committer_email: "github-actions[bot]@users.noreply.github.com"

  debug:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Debug outputs
      run: |
        echo "Released: '${{ needs.release.outputs.released }}'"
        echo "Version: '${{ needs.release.outputs.version }}'"
        echo "Tag: '${{ needs.release.outputs.tag }}'"
        echo "Type check: ${{ needs.release.outputs.released == 'true' }}"
        echo "Bool check: ${{ needs.release.outputs.released == true }}"

  test:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up virtual display and Qt dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-xinerama0 libxcb-cursor0 libxcb-shape0 libxcb-randr0 libegl1 libegl-dev libgl1-mesa-dri libglib2.0-0 libdbus-1-3
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2  # Give Xvfb time to start

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run quality checks
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy src/

    - name: Run tests
      run: |
        echo "=== Running all tests ==="
        uv run pytest tests/ --timeout=120 -v
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
        CI: true
        QT_LOGGING_RULES: "*.debug=false"

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install build dependencies
      run: |
        uv sync --group dev

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-testpypi:
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    needs: [release, build]
    environment:
      name: testpypi
      url: https://test.pypi.org/p/soren-n-qt-web-bridge
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    needs: [release, build]
    environment:
      name: pypi
      url: https://pypi.org/p/soren-n-qt-web-bridge
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
