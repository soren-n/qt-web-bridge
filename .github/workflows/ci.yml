name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  # Architecture validation - fast qtpy-only tests
  architecture:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Test qtpy-only installation (no Qt backend)
      run: |
        echo "=== Installing minimal qtpy-only environment ==="
        python -m pip install qtpy hatchling
        python -m pip install -e . --no-deps
        echo "=== Testing package imports without Qt backend ==="
        python -c "import qt_web_bridge; print('✅ Package module imports successfully')"
        echo "=== Testing graceful Qt backend failure ==="
        python -c "import qt_web_bridge; from qt_web_bridge.webview import BridgedWebView; print('❌ Should have failed')" && exit 1 || echo "✅ Graceful failure without Qt backend"

    - name: Validate no direct Qt imports
      run: |
        echo "=== Checking for direct Qt imports (should be none) ==="
        python -c "import ast,os,sys;issues=[];[issues.extend(f'{os.path.join(r,f)}: {m.module}' for n in ast.walk(ast.parse(open(os.path.join(r,f)).read())) for m in [n] if isinstance(n,ast.ImportFrom) and n.module and any(qt in n.module for qt in ['PySide6','PyQt6','PySide2','PyQt5']) and not n.module.startswith('qtpy')) for r,_,fs in os.walk('src/') for f in fs if f.endswith('.py')];print('❌ Found direct Qt imports:' + ''.join(f'\\n  {i}' for i in issues)) if issues else print('✅ No direct Qt imports found');sys.exit(1 if issues else 0)"

  # Multi-backend testing - validate qtpy abstraction works
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        qt-backend: ["pyside6", "pyside2", "pyqt6"]
        exclude:
          # PySide2 not available on Python 3.12
          - python-version: "3.12"
            qt-backend: "pyside2"

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up virtual display and Qt dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-xinerama0 libxcb-cursor0 libxcb-shape0 libxcb-randr0 libegl1 libegl-dev libgl1-mesa-dri libglib2.0-0 libdbus-1-3
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2  # Give Xvfb time to start

    - name: Install dependencies with Qt backend
      run: |
        echo "=== Installing dependencies with Qt backend: ${{ matrix.qt-backend }} ==="
        uv sync --group dev --no-install-project
        uv pip install -e .
        # Install the specific Qt backend
        case "${{ matrix.qt-backend }}" in
          pyside6) uv pip install "PySide6>=6.0" ;;
          pyside2) uv pip install "PySide2>=5.15" ;;
          pyqt6) uv pip install "PyQt6>=6.0" ;;
        esac
        echo "=== Verifying installation ==="
        uv pip list | grep ruff || echo "Ruff not found in installation"
        echo "=== Qt Backend Info ==="
        echo "Backend: ${{ matrix.qt-backend }}"

    - name: Debug environment
      run: |
        echo "=== Environment Info ==="
        echo "OS: ${{ runner.os }}"
        echo "Python: ${{ matrix.python-version }}"
        echo "Qt Backend: ${{ matrix.qt-backend }}"
        echo "Display: ${DISPLAY:-'Not set'}"
        echo "=== Tool versions ==="
        uv --version
        uv run python --version
        uv run ruff --version || echo "Ruff not available"
        echo "=== Qt Environment Check ==="
        echo "QT_API: ${{ matrix.qt-backend }}"
      env:
        QT_API: ${{ matrix.qt-backend }}

    - name: Run linting
      run: |
        echo "=== Running ruff check ==="
        uv run ruff check . --verbose
        echo "=== Running ruff format check ==="
        uv run ruff format --check . --verbose

    - name: Fix import issues if needed (CI environment)
      if: failure()
      run: |
        echo "=== Attempting to fix import issues ==="
        uv run ruff check . --fix --verbose
        echo "=== Re-running checks after fix ==="
        uv run ruff check . --verbose
        uv run ruff format --check . --verbose

    - name: Run type checking
      run: |
        uv run mypy src/

    - name: Run tests
      run: |
        echo "=== Running bridge tests with ${{ matrix.qt-backend }} ==="
        echo "QT_API: ${QT_API}"
        echo "QT_QPA_PLATFORM: ${QT_QPA_PLATFORM}"
        echo "DISPLAY: ${DISPLAY}"
        uv run pytest tests/test_bridge.py --verbose --timeout=120 -s
      env:
        QT_API: ${{ matrix.qt-backend }}
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || 'minimal' }}
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        CI: true
        QT_LOGGING_RULES: "*.debug=false"

    - name: Run utility tests
      run: |
        echo "=== Running utility tests with ${{ matrix.qt-backend }} ==="
        echo "QT_API: ${QT_API}"
        echo "QT_QPA_PLATFORM: ${QT_QPA_PLATFORM}"
        echo "DISPLAY: ${DISPLAY}"
        uv run pytest tests/test_utils.py --verbose --timeout=60 -s
      env:
        QT_API: ${{ matrix.qt-backend }}
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || 'minimal' }}
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        CI: true
        QT_LOGGING_RULES: "*.debug=false"

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install build dependencies
      run: |
        uv sync --group dev

    - name: Build package
      run: |
        uv run python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-ubuntu
        path: dist/
        retention-days: 7
