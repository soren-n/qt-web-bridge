[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "soren-n-qt-web-bridge"
version = "1.1.9"
description = "Clean Qt WebView widgets for hosting modern web UIs without styling conflicts"
readme = "README.md"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Soren N", email = "soren@example.com"},
]
keywords = ["qt", "webview", "bridge", "javascript", "pyside6", "qtpy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
]
dependencies = [
    "qtpy>=2.0.0",
    # Qt implementation will be provided by user
    # Common options: PySide6, PyQt6, PySide2, PyQt5
]
requires-python = ">=3.11"

[project.optional-dependencies]
examples = [
    "PySide6>=6.0",
]
docs = [
    "sphinx>=7.1.0",
    "furo>=2024.1.29",
    "sphinx-autodoc-typehints>=1.25.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=2.0.0",
    "sphinx-autoapi>=3.0.0",
    "sphinxext-opengraph>=0.9.0",
    "sphinx-design>=0.5.0",
]

[project.urls]
Homepage = "https://github.com/soren-n/qt-web-bridge"
Repository = "https://github.com/soren-n/qt-web-bridge.git"
Issues = "https://github.com/soren-n/qt-web-bridge/issues"
Documentation = "https://qt-web-bridge.readthedocs.io/"

[tool.hatch.build.targets.wheel]
packages = ["src/qt_web_bridge"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011"]  # allow assert False in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "qtpy.*",
    "PySide6.*",
    "PyQt6.*",
    "PySide2.*",
    "PyQt5.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --tb=short --strict-markers --strict-config"
qt_api = "pyside6"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gui: marks tests that require GUI interaction",
]

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "ruff==0.12.10",
    "mypy>=1.17.0",
    "black>=25.1.0",
    "pre-commit>=4.3.0",
    "build>=1.3.0",
    "twine>=6.1.0",
    "python-semantic-release>=10.3.0",
    "PySide6>=6.9.0", # For development/testing
    "pytest-timeout>=2.4.0",
]
docs = [
    "furo>=2025.7.19",
    "linkify-it-py>=2.0.3",
    "myst-parser>=4.0.1",
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-autodoc-typehints>=3.2.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinxext-opengraph>=0.12.0",
]

[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version",
]
dist_path = "dist/"
upload_to_vcs_release = true

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor", "build"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
